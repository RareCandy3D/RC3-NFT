The dApp functions are used as follows:

--------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------
RC3_721_Factory and RC3_1155_Factory contracts:


- function create721NFT(
    string memory _name,
    string memory _symbol,
    string memory _uri,
    uint96 _royalty


- function create1155NFT(
    string memory _name,
    string memory _symbol,
    string memory _uri,
    uint96 _royalty

Params: you need to pass in the name, symbol, uri (with / at the end), and royalty (where 1% = 100, and 10% == 1000)


These 2 functions appear in RC3_721_Factory and RC3_1155_Factory contracts respectively. 
It will be called when a user tries to deploy a new nft smart contract for their project.
A fee will be charged from them in ETH.
this fee can be found from the public method "fee"

--------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------
RC3_Originals contract


- function setRoyaltyInfo(uint256 _tokenId, address payable _receiver): can be called by the creator of tokenId to set royalty recipient

- function royaltyInfo(uint256 _tokenId, uint256 _salePrice): returns the royalty address, as well as the royalty fee 

- function mint(
    string memory _tokenURI,
    address payable creator,
    bytes32 category,
    bytes32 nature
):

    This function mints a new token id. 
    Note that the category and nature must be present in the "categories" and "natures" return values 

- function setMarket(address market, bool isMarket): Used to set or remove a contract address from being recorgnized as whitelisted
- function getInfo(uint256 tokenId): returns an array of info for a tokn id. this includes the
i. creator's address
ii. nature in bytes32
iii. category in bytes32

- categories: returns an array of bytes32 which represents the individual categories created on the contract
- natures: returns an array of bytes32 with length 3 (physical, digital & phygital) which represents the individual natures creatable in the contract

--------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------
RC3_Creators contract


- function createCategory(bytes32 category): allows users to create a new category in the contract. You must pass in the bytes32 of the string inputted by the user. To generate the bytes32 of a string, you need to call the following function:

- function stringToBytes32(string memory source)

- function canCreatePhysical(address creator): returns true or false if "creator" is able to create a physical or phygital nature NFT.

- function createToken(
    address _initialHodler,         // can be the zero address if _initialSupply is 0, else, must be a valid address
    uint256 _initialSupply,         // initial supply to be minted        
    uint256 _maxSupply,             // max supply that can ever exist on this collection
    uint256 royalty,                // royalty on this collection 1% = 100. max is 50% ~ 5000
    bytes32 category,               // check "categories" for valid category
    bytes32 nature,                 // check "natures" for valid category
    string memory _uri              // can be an empty string or website url. Must end with /
) external returns (uint256 tokenId):        // token id of the newly created collection
    
    This function creates a new NFT collection.

- function mint(
    address to,                     
    uint256 id,
    uint256 amount
) external returns (bool success):
    
    mints tokens

- function mintBatch(
    address to,
    uint256[] memory ids,
    uint256[] memory amounts
) external returns (bool success):
    
    mints tokens in batch. sender must have minting rights in all the ids

- function setMinter(
    uint256 id,
    address minter,
    bool _canMint
) external: 

    enables the creator of token id to set wallets that can mint on the id

- function setRoyaltyInfo(
    address payable creator_,               // creators address
    address payable[] memory recipients,    // array of addresses which have shares in the royalty of this token id
    uint256[] memory shares,                // array of shares with index representing recipients index. Must total 1000 (1% = 10 shares)
    uint256 id,                             // token id
    uint256 royalty                         // royalty on this collection 1% = 100. max is 50% ~ 5000  
):

    This function enables the creator of this token id the means to set split royatlies on who is entitled for shares in this id

- function creator(uint256 _id) public view returns (address creator_): returns the creators address for token id _id

- function exists(uint256 _id) external view returns (bool): returns true if _id exists in the contract

- function getInfo(uint256 _id) external view returns (Info memory info): returns an array of info for a token _id. this includes the
i. creator's address
ii. nature in bytes32
iii. category in bytes32
iv. supply of _id
v. max supply of _id
vi. royalty of _id
v. custom URI string if any

- function tokenSupply(uint256 _id) external returns (uint256 tokenSupply_): returns the supply of token id _id

- function uri(uint256 id) public view override returns (string memory): returns the URI of token id

--------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------
RC3_Mall contract (Auction)

- function listAuction(
    address nifty,                  // address of NFT being auctioned. 
    uint256 _tokenId,               // token id of the NFT. must be owned by the caller
    uint256 amount,                 // amount to be auctioned. Must be 1 for ERC721 NFTs
    uint256 _startsIn,              // seconds before start
    uint256 _lastsFor,              // duration of auction in seconds
    uint256 _initialBidAmount,      // floor price of auction in RCDY tokens
    TokenType _type                 // token type (ERC721 or ERC1155)
) external returns (uint256 auctionId_):
    
    This is used to list a new auction. A new auction id is created and returned upon doing this (auctionId_)

- function bid(uint256 _auctionId, uint256 _bidAmount) returns (bool bidded):
    This is used to place bids on an active auction. see nextBidAmount(_auctionId) below to get the viable _bidAmount
    Note: Must have enough RCDY and must have approved the smart contract

- function closeBid(uint256 _auctionId)
    external
    nonReentrant
    returns (State status):
    
    This is used to close bids after bid period has elapsed. see bidTimeRemaining(uint256 _auctionId). The creator of _auctionId or admin may call this.
    When called, the auctioned NFTs get sent to the highest bidder if there were bids. Otherwise, the NFT will be sent back to the person who listed it 

- function bidTimeRemaining(uint256 _auctionId)returns (uint256 startsIn, uint256 endsIn): 
    This function returns two values. startsIn is the number of seconds left for _auctionId to start. Value will be 0 if auction already started. 
    endsIn returns the time left for _auctionId to end. Will return 0 if already ended

- function nextBidAmount(uint256 _auctionId) returns (uint256 amount):
    This returns the next minimum viable amount in RCDY tokens that can be bidded with by the next bidder for _auctionId

- function getAuction(uint256 _auctionId) returns (Auction memory auction_):
    This returns an array of values concerning _auctionId. They include:
i. sellers address
ii. address of the highest bidder
iii. address of the NFT being auctioned (sold)
iv. the token id of the NFT being sold
v. the amount of tokens being auctioned. For ERC721, the value must equal 1
vi. the starting price for the bidded
vii. the highest bid amount
viii. the timestamp for start period 
ix. the timestamp for end period 
x. the number of bids done on _auctionId so far
xi. the type of token (721 or 1155 respectively)
xii. the state of the auction (listed, delisted, or sold respectively)

- function feePercentage(): returns the fee for RCDY sales in %. 1000 represents 1%

- function auctionId(): returns the nonce of auctions

- function auctionClosed(): returns the number of closed auctions

--------------------------------------------------------------------------------------------------------------------------------------------------------------
RC3_Mall contract (Market)

- function listMarket(
    address nifty,              // address of NFT being sold. 
    uint256 _tokenId,           // token id of NFT being sold. Caller must own this
    uint256 amount,             // amount to be sold. Must be 1 for ERC721 NFTs
    uint256 _price,             // price of sale in RCDY or ETH
    TokenType _type,            // type. either 721 or 1155
    Asset _asset                // whether trade should be in ETH or RCDY respectively
) external returns (uint256 marketId_):     // returns marketId_ of newly created sale
    
    This function is used to list a market sale with a constant price. Lister must own the token(s) being listed, and must choose which asset the trade should be made with

- function delistMarket(uint256 _marketId)
    external
    nonReentrant
    returns (State status):

    The lister of _marketId can delist their sale if they no longer wish to sell. Must wait for waitPeriod()

- function buyWithETH(uint256 _marketId)
    external
    payable
    buyCheck(_marketId)
    returns (bool bought):

    This is used to buy _marketId with ETH. Can only happen if the lister of _marketId chose to sell with ETH. see listMarket() above
    Note: Must pass the value of ETH

- function buyWithRCDY(uint256 _marketId)
    external
    buyCheck(_marketId)
    returns (bool bought)

    This is used to buy _marketId with RCDY. Can only happen if the lister of _marketId chose to sell with RCDY. see listMarket() above
    Note: Must have enough RCDY and must have approved the smart contract

- function getMarket(uint256 _marketId)
    external
    view
    returns (Market memory):

    This returns an array of values concerning _marketId. They include:
i. sellers address
ii. the type of token (721 or 1155 respectively)
iii. address of the buyer
iv. the state of the market (listed, delisted, or sold)
v. address of the NFT being sold
vi. the chosen asset by the lister to make sales with (ETH or RCDY)
vii. the token id of the NFT being sold
viii. the amount of tokens being sold. For ERC721, the value must equal 1
ix. the price for the item
x. the timestamp of listing

- function ethFee(): returns the fee for ETH sales in %. 1000 represents 1%

- function marketId(): returns the nonce of markets created

- function marketSold(): returns the number of sold markets

- function marketDelisted(): returns the number of delisted markets

- function waitPeriod(): returns the time is seconds that a market must last for before it can be delisted after listing
